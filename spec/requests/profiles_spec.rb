 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/profiles", type: :request do
    before(:all) do
        user = create :user_with_all_attributes
        login_user(user)

        @profile = user.profile
    end

    describe "GET /show" do
        it "renders a successful response" do
            get profile_url(@profile)
            expect(response).to be_successful
            expect(response).to have_http_status(:ok)
        end

        it "renders an unsuccessful response" do
            get "/profiles/invalid_id"
            expect(response).to_not be_successful
            expect(response).to_not have_http_status(:not_found)
            expect(flash[:notice]).to match("Profile not found.")
            expect(response).to redirect_to(root_path)
        end
    end

    describe "GET /edit" do
        it "renders a successful response" do
            get edit_profile_url(@profile)
            expect(response).to be_successful
            expect(response).to have_http_status(:ok)
        end
    end

    describe "PATCH /update" do
        context "with valid parameters" do
            let(:new_attributes) {
                {first_name: Faker::Name.first_name, last_name: Faker::Name.last_name, bio: Faker::Restaurant.description, image_url: Faker::LoremFlickr.image}
            }

            it "updates the requested profile" do
                patch profile_url(@profile), params: { profile: new_attributes }
                @profile.reload
                expect(@profile[:title]).to eq(new_attributes[:title])
                expect(@profile[:image_url]).to eq(new_attributes[:image_url])
            end

            it "redirects to the profile" do
                patch profile_url(@profile), params: { profile: new_attributes }
                @profile.reload
                expect(response).to redirect_to(profile_url(@profile))
            end
        end

        context "with invalid parameters" do
            let(:invalid_attributes) {
                {invalid_field: 'Test invalid field', another_invalid_field: 'Test invalid field'}
            }

            it "renders an unsuccessful response" do
                patch profile_url(@profile), params: { profile: invalid_attributes }
                expect(response).to_not be_successful
                expect(response).to have_http_status(:found)
            end
        end
    end
end
