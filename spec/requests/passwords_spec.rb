require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/passwords", type: :request do
    before(:all) do
        @user = create :user_with_all_attributes
    end

    describe "GET /password/reset" do
        it "renders a successful response" do
            get password_reset_url(@password)
            expect(response).to be_successful
            expect(response).to have_http_status(:ok)
        end
    end

    describe "POST /password/reset" do 
        it "redirects to root with valid email" do
            post password_reset_url(email: @user.email)
            expect(response).to redirect_to(root_path)
        end

        it "renders an unsuccessful response with invalid email" do
            post password_reset_url(email: "invalid@email.com")
            expect(response).to_not be_successful
            expect(response).to have_http_status(:unprocessable_entity)
        end
    end

    describe "GET /password/reset/edit" do
        it "renders a successful response" do
            token = @user.signed_id(purpose: "password_reset", expires_in: 15.minutes)
            get password_reset_edit_url(token: token)
            expect(response).to be_successful
            expect(response).to have_http_status(:ok)
        end
    end

    describe "PATCH /password/reset/edit" do
        before(:all) do
            @token = @user.signed_id(purpose: "password_reset", expires_in: 15.minutes)
        end

        context "with valid parameters" do
            let(:new_attributes) {
                {password: "new_password", password_confirmation: "new_password"}
            }

            it "redirects to login" do
                patch password_reset_edit_url(token: @token), params: { user: new_attributes }
                expect(response).to redirect_to(login_url)
            end
        end

        context "with invalid parameters" do
            let(:invalid_attributes) {
                {password: "new_password", password_confirmation: "unmatching_new_password"}
            }

            it "renders an unsuccessful response" do
                patch password_reset_edit_url(token: @token), params: { user: invalid_attributes }
                expect(response).to_not be_successful
                expect(response).to have_http_status(:unprocessable_entity)
            end
        end
    end
end
